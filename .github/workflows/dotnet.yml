name: .NET CI

on:
  push:
    branches: [ "main", "master", "develop", "dev" ]
  pull_request:
    branches: [ "main", "master", "develop", "dev" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Find solution or project
        id: target
        shell: bash
        run: |
          shopt -s globstar nullglob
          sols=(**/*.sln)
          if [ ${#sols[@]} -gt 0 ]; then
            target="${sols[0]}"
          else
            projs=(**/*.csproj)
            if [ ${#projs[@]} -gt 0 ]; then
              target="${projs[0]}"
            else
              echo "No .sln or .csproj found in repository"; exit 1
            fi
          fi
          echo "target=$target" >> "$GITHUB_OUTPUT"
          echo "workdir=$(dirname "$target")" >> "$GITHUB_OUTPUT"
          echo "Using target: $target"

      - name: Restore
        run: dotnet restore "${{ steps.target.outputs.target }}"

      - name: Build (Release)
        run: dotnet build "${{ steps.target.outputs.target }}" --configuration Release --no-restore

      - name: Discover test projects
        id: tests
        shell: bash
        run: |
          shopt -s globstar nullglob
          arr=(**/*Tests.csproj)
          echo "found=${#arr[@]}" >> $GITHUB_OUTPUT
          if [ ${#arr[@]} -gt 0 ]; then
            printf "list<<EOF\n%s\nEOF\n" "$(printf "%s\n" "${arr[@]}")" >> $GITHUB_OUTPUT
          fi

      - name: Test
        if: steps.tests.outputs.found != '0'
        shell: bash
        run: |
          mkdir -p TestResults
          while IFS= read -r proj; do
            [ -z "$proj" ] && continue
            dotnet test "$proj" --configuration Release --no-build \
              --logger "trx;LogFileName=$(basename "${proj%.*}").trx" \
              --results-directory ./TestResults
          done <<< "${{ steps.tests.outputs.list }}"

      - name: Upload test results
        if: always() && steps.tests.outputs.found != '0'
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults/*.trx
          if-no-files-found: ignore
